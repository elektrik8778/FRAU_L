from urllib import request
from app.telegram_bot.helpers import with_app_context
from app import db, bot
from app.models import User, Quiz, Question, UserQuestion, Group, FoodOrder, UserBonus
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaVideo, InputMediaAudio, LabeledPrice, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from app.telegram_bot import texts
from app import Config
from telegram import Update, ParseMode, Poll
import os
from datetime import datetime
import json
import math
import requests
import cv2
from google.cloud import dialogflow_v2 as dialogflow
from google.cloud.dialogflow_v2 import DetectIntentResponse
from googleapiclient.discovery import build
from google.oauth2 import service_account
import re

def greet_user(user: User):
    photo = None
    try:
        with open('app/static/images/logo.fid', 'r') as fid:
            photo = fid.read()
    except Exception as e:
        print(e)
        photo = open('app/static/images/logo.jpg', 'rb')

    response = bot.send_photo(chat_id=user.tg_id,
                              caption=f"{texts.greeting(user)}",
                              photo=photo,
                              parse_mode=ParseMode.MARKDOWN,
                              reply_markup=ReplyKeyboardRemove()
                              )
    if not isinstance(photo, str):
        photo.close()
    with open('app/static/images/logo.fid', 'w') as fid:
        fid.write(response.photo[-1].file_id)


    try:
        with open('app/static/images/bot_images/menu_hint.fid', 'r') as fid:
            photo = fid.read()
    except Exception as e:
        print(e)
        photo = open('app/static/images/bot_images/menu_hint.png', 'rb')

    response = bot.send_photo(chat_id=user.tg_id,
                              caption="–ü–æ–¥—Å–∫–∞–∑–∫–∞",
                              photo=photo,
                              parse_mode=ParseMode.MARKDOWN,
                              reply_markup=ReplyKeyboardRemove()
                              )
    if not isinstance(photo, str):
        photo.close()
    with open('app/static/images/bot_images/menu_hint.fid', 'w') as fid:
        fid.write(response.photo[-1].file_id)

    return


def success_registration(user: User):
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    photo = None
    vid = height = width = None
    try:
        with open('app/static/video/success_reg.fid', 'r') as fid:
            video = fid.read()
    except Exception as e:
        print(e)
        video = open('app/static/video/success_reg.mp4', 'rb')
        vid = cv2.VideoCapture('app/static/video/success_reg.mp4')
        height = vid.get(cv2.CAP_PROP_FRAME_HEIGHT)
        width = vid.get(cv2.CAP_PROP_FRAME_WIDTH)

    response = bot.send_video(chat_id=user.tg_id,
                              caption=f"{texts.success_registration(user)}",
                              video=video,
                              height=height,
                              width=width,
                              protect_content=True,
                              parse_mode=ParseMode.MARKDOWN)

    if not isinstance(video, str):
        video.close()
    with open('app/static/video/success_reg.fid', 'w') as fid:
        fid.write(response.video.file_id)

    response = bot.send_message(chat_id=user.tg_id,
                                text=f"–ê –≤–æ—Ç –≤–∞–º *–±–æ–Ω—É—Å–Ω—ã–π –ø–µ—Ä–≤—ã–π* –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç–∏–∫\n\n"
                                     f"–í—Å–µ —Å–≤–æ–∏ –ª–æ—Ç–µ—Ä–µ–π–∫–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –º–µ–Ω—é  *'–ú–æ–∏ –ª–æ—Ç–µ—Ä–µ–π–∫–∏'*",
                                parse_mode=ParseMode.MARKDOWN)

    if len(user.get_lottery_numbers()) == 0:
        user.create_lottery_number(reason='success_reg', description='–ø–µ—Ä–≤—ã–π –±–æ–Ω—É—Å–Ω—ã–π').send(user)

    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –µ—Å–ª–∏ –±–∏–ª–µ—Ç–æ–≤ —É —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–π
    # if not user.get_lottery_cards():
    #     for c in user.add_lottery_cards(count=1):
    #         bot.send_photo(chat_id=user.tg_id,
    #                        photo=f'{c.text}/{Config.LOTTO_API_TOKEN}')


@with_app_context
def command_start(update, context):
    # update.effective_message.delete()
    chat_id = update.effective_user.id
    btn = KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="start_phone", request_contact=True)
    user = User.query.filter_by(tg_id=chat_id).first()
    users_count = len(User.query.all())
    if not user:
        user = User()
        user.tg_id = chat_id
        user.status = 'wait_for_phone'
        user.set_password(str(chat_id))
        user.group = Group.query.first().id
        if users_count == 0:
            user.role = 'admin'
        else:
            user.role = 'user'
        try:
            user.first_name = update.message.from_user.first_name
        except:
            pass
        db.session.add(user)
        db.session.commit()
        # user.write_to_google_sheet()

        update.effective_chat.send_message(text="–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n–î–ª—è —ç—Ç–æ–≥–æ:\n\n–ò–õ–ò –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *'–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω'* –≤–Ω–∏–∑—É\n\n–ò–õ–ò –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–º  *–≤ —Ñ–æ—Ä–º–∞—Ç–µ 89112223344*",
                                           reply_markup=ReplyKeyboardMarkup([[btn]], resize_keyboard=True),
                                           parse_mode=ParseMode.MARKDOWN)

        # return greet_user(user)
    else:
        if user.phone:
            user.status = ''
            db.session.commit()
            user.set_subscribed()
            greet_user(user)
        else:
            update.effective_chat.send_message(text="–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n–î–ª—è —ç—Ç–æ–≥–æ:\n\n–ò–õ–ò –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *'–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω'* –≤–Ω–∏–∑—É\n\n–ò–õ–ò –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–º  *–≤ —Ñ–æ—Ä–º–∞—Ç–µ 89112223344*",
                                               reply_markup=ReplyKeyboardMarkup([[btn]], resize_keyboard=True),
                                               parse_mode=ParseMode.MARKDOWN)


@with_app_context
def set_order_paid(update: Update, context):
    order: FoodOrder = FoodOrder.query.get(int(update.callback_query.data.split('_')[-1]))
    order.set_paid()
    return 'ok'


@with_app_context
def cancel_order(update: Update, context):
    try:
        FoodOrder.query.get(int(update.callback_query.data.split('_')[-1])).cancel()
    except Exception as e:
        update.effective_message.reply_text(str(e))
    return 'ok'


@with_app_context
def command_bonus(update: Update, context):
    user: User = User.query.filter(User.tg_id == update.effective_user.id).first()
    bonus = user.get_users_bonuses_amount()
    update.effective_message.reply_text(f'–£ –≤–∞—Å *{bonus}* –±–æ–Ω—É—Å–æ–≤', parse_mode=ParseMode.MARKDOWN)


@with_app_context
def command_help(update: Update, context):
    chat_id = int(update.message.from_user.id)
    message_id = int(update.message.message_id)
    sender: User = User.query.filter(User.tg_id == chat_id).first()
    update.message.delete()

    confirm_btn = InlineKeyboardButton(text='–î–∞, –ø–æ–º–æ—â—å –Ω—É–∂–Ω–∞', callback_data='help')
    cancel_btn = InlineKeyboardButton(text='–ù–µ—Ç, –ø–æ–º–æ—â—å –Ω–µ –Ω—É–∂–Ω–∞', callback_data='deleteMessage')

    keyboard = [[confirm_btn], [cancel_btn]]

    update.message.reply_text(
        text='üÜò –í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏ üÜò.\n\n–ó–∞—á–∞—Å—Ç—É—é –µ—ë –Ω–∞–∂–∏–º–∞—é—Ç –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫. –ê –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –î–µ–¥—É—à–∫–∏ –ú–æ—Ä–æ–∑–∞.\n\n*–í–∞–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–∞ –Ω–∞—à–∞ –ø–æ–º–æ—â—å?*',
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN)


@with_app_context
def help(update: Update, context):
    user = User.query.filter(User.tg_id == update.callback_query.from_user.id).first()
    update.callback_query.delete_message()
    texts.help(user)


@with_app_context
def delete_message(update: Update, context):
    update.callback_query.delete_message()


@with_app_context
def command_test(update: Update, context):
    command = update.message.text.split('/test')[-1].strip()
    quiz: Quiz = Quiz.query.filter(Quiz.command == command).first()
    user = User.query.filter(User.tg_id == update.message.from_user.id).first()

    if quiz:
        from app.admin.routes import send_quiz_start
        send_quiz_start(quiz.id, [user])


# —Å—Ç–∞—Ä—ã–µ
def command_users_count(update: Update, context):
    from app import create_app
    app = create_app(config_class=Config)
    app.app_context().push()

    all_users = User.query.all()
    tg_users = User.query.filter(User.tg_id.isnot(None)).all()
    unsubscribed_users = User.query.filter(User.tg_id.isnot(None), User.unsubscribed.is_(True)).all()
    user = User.query.filter_by(tg_id=update.message.from_user.id).first()
    bot.send_message(chat_id=user.tg_id,
                     text=f'*–í—Å–µ–≥–æ –≤ —Å–∏—Å—Ç–µ–º–µ* {len(all_users)}\n'
                          f'*–ë–æ—Ç–∞ –ø–æ–¥–∫–ª—é—á–∏–ª–∏* {len(tg_users)}\n'
                          f'*–û—Ç–ø–∏—Å–∞–ª–∏—Å—å* {len(unsubscribed_users)}',
                     parse_mode=ParseMode.MARKDOWN)


@with_app_context
def text_message(update, context):
    sender = User.query.filter_by(tg_id=update.message.from_user.id).first()
    text = update.message.text
    if sender.status == 'wait_for_phone':
        try:
            pattern = re.compile('^((8|\+7)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{11,16}$')
            if re.match(pattern=pattern, string=text):
                sender.phone = text
                sender.status = ''
                db.session.commit()
                greet_user(sender)
                return
            else:
                raise 'WrongPhoneNumber'
        except:
            btn = KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω",
                                 callback_data="start_phone",
                                 request_contact=True,
                                 one_time_keyboard=True)
            update.effective_chat.send_message(
                text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –î–ª—è —ç—Ç–æ–≥–æ:\n\n–ò–õ–ò –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *'–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω'* –≤–Ω–∏–∑—É\n\n–ò–õ–ò –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–º  *–≤ —Ñ–æ—Ä–º–∞—Ç–µ 89112223344*",
                reply_markup=ReplyKeyboardMarkup([[btn]], resize_keyboard=True),
                parse_mode=ParseMode.MARKDOWN)
            return

    moderators = sender.get_group().moderators
    for user in moderators:
        response = bot.send_message(chat_id=user.tg_id,
                                    text=f'{texts.tg_user_mention(sender)}:\n\n{text}',
                                    parse_mode=ParseMode.MARKDOWN)
    return 'ok'


@with_app_context
def reply_message(update, context):
    sender_tg_id = None
    if c := update.message.contact:
        u = User.query.filter_by(tg_id=c.user_id).first()
        u.phone = c.phone_number
        db.session.merge(u)
        db.session.commit()
        greet_user(u)
        return
    if update.message.reply_to_message.entities:
        entities = update.message.reply_to_message.entities
        for entity in entities:
            if entity.type == 'text_mention':
                sender_tg_id = entity.user.id
    try:
        text = update.effective_message.text
    except(AttributeError):
        text = update.effective_message.caption

    if sender_tg_id:
        sender = User.query.filter_by(tg_id=sender_tg_id).first()
        bot.send_message(chat_id=sender.tg_id,
                         text=text)


@with_app_context
def location_message(update: Update, context):
    sender = User.query.filter_by(tg_id=update.message.from_user.id).first()
    location = update.message.location
    moderators = sender.get_group().moderators
    for user in moderators:
        response = bot.send_message(chat_id=user.tg_id,
                                    text=f'{texts.tg_user_mention(sender)} –ø—Ä–∏—Å–ª–∞–ª –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é',
                                    parse_mode=ParseMode.MARKDOWN)
        bot.send_location(chat_id=user.tg_id,
                          location=location,
                          reply_to_message_id=response.message_id)


@with_app_context
def contact_message(update, context):
    update.effective_message.delete()
    sender = User.query.filter_by(tg_id=update.message.from_user.id).first()
    contact = update.message.contact
    if sender.status == 'wait_for_phone':
        sender.phone = contact.phone_number
        sender.status = ''
        # db.session.merge(sender)
        db.session.commit()
        greet_user(sender)
        return
    else:
        moderators = sender.get_group().moderators
        for user in moderators:
            response = bot.send_message(chat_id=user.tg_id,
                                        text=f'{texts.tg_user_mention(sender)} –ø—Ä–∏—Å–ª–∞–ª –∫–æ–Ω—Ç–∞–∫—Ç',
                                        parse_mode=ParseMode.MARKDOWN)
            bot.send_contact(chat_id=user.tg_id,
                             contact=contact,
                             reply_to_message_id=response.message_id)


@with_app_context
def photo_message(update: Update, context):
    sender = User.query.filter_by(tg_id=update.message.from_user.id).first()
    text = update.effective_message.caption

    moderators = sender.get_group().moderators
    for user in moderators:
        response = bot.send_photo(chat_id=user.tg_id,
                                  photo=update.effective_message.photo[-1].file_id,
                                  caption=f'{texts.tg_user_mention(sender)}:\n\n{text}',
                                  parse_mode=ParseMode.MARKDOWN)
    return 'ok'


@with_app_context
def video_message(update, context):
    try:
        caption = update.message.caption
    except:
        caption = ''
    sender = User.query.filter_by(tg_id=update.message.from_user.id).first()
    file_id = update.message.video
    moderators = sender.get_group().moderators
    for user in moderators:
        response = bot.send_video(chat_id=user.tg_id,
                                  caption=f'{texts.tg_user_mention(sender)}: {caption}',
                                  parse_mode='Markdown',
                                  video=file_id)


@with_app_context
def document_message(update: Update, context):
    try:
        caption = update.message.caption
    except:
        caption = ''
    sender = User.query.filter_by(tg_id=update.message.from_user.id).first()
    file_id = update.message.document.file_id
    moderators = sender.get_group().moderators
    for user in moderators:
        response = bot.send_document(chat_id=user.tg_id,
                                     caption=f'{texts.tg_user_mention(sender)}: {caption}',
                                     parse_mode='Markdown',
                                     document=file_id)


@with_app_context
def native_poll_message(update: Poll, context):
    sender = User.query.filter_by(tg_id=update.message.from_user.id).first()
    if sender.role == 'admin':
        pass
    else:
        pass


@with_app_context
def poll_message(update, context):
    users_answer = update.poll_answer.option_ids
    user = User.query.filter_by(tg_id=update.poll_answer.user.id).first()
    quiz = Quiz.query.get(int(user.status.split('_')[1]))
    current_question_index = int(user.status.split('_')[-1])
    current_question: Question = quiz.questions()[current_question_index]
    answer_type = current_question.answer_type
    right = set(users_answer) == set(current_question.get_right_answers())

    if answer_type == 'text':
        try:
            response = bot.send_message(chat_id=user.tg_id,
                                        text=quiz.questions()[current_question_index].right_answer_text if right else
                                        quiz.questions()[current_question_index].wrong_answer_text)
        except Exception as e:
            print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')

    elif answer_type == 'photo':
        try:
            response = bot.send_photo(chat_id=user.tg_id,
                                      photo=quiz.questions()[current_question_index].answer_content,
                                      caption=quiz.questions()[current_question_index].right_answer_text if right else
                                      quiz.questions()[current_question_index].wrong_answer_text)
        except Exception as e:
            print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
    elif answer_type == 'video':
        try:
            response = bot.send_video(chat_id=user.tg_id,
                                      video=quiz.questions()[current_question_index].answer_content,
                                      caption=quiz.questions()[current_question_index].right_answer_text if right else
                                      quiz.questions()[current_question_index].wrong_answer_text)
        except Exception as e:
            print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
    elif answer_type == 'audio':
        try:
            response = bot.send_audio(chat_id=user.tg_id,
                                      audio=quiz.questions()[current_question_index].answer_content,
                                      caption=quiz.questions()[current_question_index].right_answer_text if right else
                                      quiz.questions()[current_question_index].wrong_answer_text)
        except Exception as e:
            print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')

    # –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_question = UserQuestion.query.filter(UserQuestion.user_id == user.id,
                                              UserQuestion.question_id == current_question.id).first()
    if not user_question:
        user_question = UserQuestion()
    user_question.user_id = user.id
    user_question.question_id = current_question.id
    user_question.right = right
    user_question.answer = current_question.get_answer_by_index(users_answer[0])
    db.session.add(user_question)
    db.session.commit()

    # –µ—Å–ª–∏ –µ—â–µ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - —à–ª–µ–º —Å–ª–µ–¥—É—é—â–∏–π
    if current_question_index + 1 < len(quiz.questions()):
        user.status = f'playQuiz_{quiz.id}_{current_question_index + 1}'
        db.session.commit()
        send_question(user=user, quiz=quiz)
    # –∏–Ω–∞—á–µ –æ—Ç–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    else:
        # —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        right_answers_count = len(UserQuestion.query.filter(UserQuestion.user_id == user.id,
                                                            UserQuestion.right.is_(True),
                                                            UserQuestion.question_id.in_(
                                                                [x.id for x in quiz.questions()])).all())
        # —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        questions_count = len(quiz.questions())

        quiz_result = f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ {right_answers_count} –∏–∑ {questions_count}'

        try:
            if quiz.final_text:
                response = bot.send_message(chat_id=user.tg_id,
                                            text=f'{quiz.final_text}\n\n*{quiz_result}*',
                                            parse_mode='Markdown')
            else:
                response = bot.send_message(chat_id=user.tg_id,
                                            text=f'–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n\n*{quiz_result}*',
                                            parse_mode='Markdown')
            reward_user(user, quiz)
        except Exception as e:
            print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')

        user.status = ''
        db.session.commit()


@with_app_context
def audio_message(update, context):
    sender = User.query.filter(User.tg_id == update.message.from_user.id).first()
    moderators = sender.get_group().moderators
    for moderator in moderators:
        bot.send_voice(chat_id=moderator.tg_id,
                       voice=update.message.voice,
                       caption=f'–ê—É–¥–∏–æ –æ—Ç {sender.id} {texts.tg_user_mention(sender)}',
                       parse_mode='Markdown')


def start_quiz(update, context):
    from app import create_app
    app = create_app(config_class=Config)
    with app.app_context():
        quiz_id = update.callback_query.data.split('_')[-1]
        quiz = Quiz.query.get(quiz_id)
        message_id = update.callback_query.message.message_id
        user = User.query.filter_by(tg_id=update.callback_query.from_user.id).first()
        user.status = f'playQuiz_{quiz.id}_0'
        db.session.commit()
        bot.edit_message_text(chat_id=user.tg_id,
                              text=f'–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ *"{quiz.name}"*',
                              message_id=message_id,
                              parse_mode='Markdown')
        send_question(user=user, quiz=quiz, question_number=0)


def send_question(update=None, context=None, user=None, quiz=None, question_number=-1):
    from app import create_app
    app = create_app(config_class=Config)
    with app.app_context():
        if not user:
            user: User = User.query.filter_by(tg_id=update.callback_query.from_user.id).first()
        if not quiz:
            quiz: Quiz = Quiz.query.get(user.status.split('_')[1])
        if question_number < 0:
            question_number = int(user.status.split('_')[-1])

        variants = quiz.questions()[question_number].question_variants.split('\n')
        correct_option_id = ''
        options = []

        for index, option in enumerate(variants):
            if not option.split(' ')[-1].strip() == '(–≤–µ—Ä–Ω—ã–π)':
                options.append(option.strip())
            else:
                options.append(option.strip().split('(–≤–µ—Ä–Ω—ã–π)')[0])
                correct_option_id = index

        question_type = quiz.questions()[question_number].question_type

        if question_type == 'photo':
            if len(quiz.questions()[question_number].question_content.split(',')) > 1:
                media = []
                for m in quiz.questions()[question_number].question_content.split(','):
                    media.append(InputMediaPhoto(media=m))
                response = bot.send_media_group(chat_id=user.tg_id,
                                                media=media)
            else:
                response = bot.send_photo(chat_id=user.tg_id,
                                          photo=quiz.questions()[question_number].question_content)
        elif question_type == 'video':
            response = bot.send_video(chat_id=user.tg_id,
                                      video=quiz.questions()[question_number].question_content)
        elif question_type == 'audio':
            response = bot.send_audio(chat_id=user.tg_id,
                                      audio=quiz.questions()[question_number].question_content)

        response = bot.send_poll(
            chat_id=user.tg_id,
            question=quiz.questions()[question_number].question_text,
            options=json.dumps(options),
            type='quiz',
            correct_option_id=correct_option_id,
            explanation=quiz.questions()[question_number].answer_explanation,
            is_anonymous=False,
            explanation_parse_mode=ParseMode.MARKDOWN
        )


def create_button_map(buttons, col_count):
    button_map = []
    row_count = math.ceil(len(buttons) / col_count)
    current_button = 0
    for i in range(row_count):
        button_map.append([])
        for j in range(col_count):
            if current_button < len(buttons):
                button_map[len(button_map) - 1].append(buttons[current_button])
                current_button += 1
    return button_map


def get_inline_menu(button_lists):
    buttons = []
    item_count = -1
    for item in button_lists:
        if isinstance(item, list):
            item_count += 1
            buttons.append([])
            for subitem in item:
                inline_button = {
                    'text': f'{subitem["text"]}',
                    'callback_data': f'{subitem["data"]}'
                }
                buttons[item_count].append(inline_button)
        else:
            item_count += 1
            inline_button = {
                'text': f'{item["text"]}',
                'callback_data': f'{item["data"]}'
            }
            buttons.append([inline_button])

    ReplyKeyboardMarkup = {
        'inline_keyboard': buttons
    }
    return json.dumps(ReplyKeyboardMarkup)


def reward_user(user, quiz):
    wrong_answers_count = len(UserQuestion.query.filter(UserQuestion.user_id == user.id,
                                                        UserQuestion.right.is_(False),
                                                        UserQuestion.question_id.in_(
                                                            [x.id for x in quiz.questions()])).all())

    if wrong_answers_count == 0:
        bot.send_message(chat_id=user.tg_id,
                         text='–í—ã –ø—Ä–æ—à–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –±–µ–∑ –æ—à–∏–±–æ–∫. –õ–æ–≤–∏—Ç–µ –≤–∞—à–∏ –±–æ–Ω—É—Å—ã. \n\n–ö—Å—Ç–∞—Ç–∏, –≤–∞—à –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /bonus',
                         parse_mode=ParseMode.MARKDOWN)
        # —Å–æ–∑–¥–∞–µ–º –±–æ–Ω—É—Å—ã
        user_bonus: UserBonus = UserBonus()
        user_bonus.user = user.id
        user_bonus.amount = 50
        user_bonus.reason = f'–£—Å–ø–µ—à–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ #{quiz.id} {quiz.name}'
        db.session.add(user_bonus)
        db.session.commit()
    else:
        bot.send_message(chat_id=user.tg_id,
                         text='''
–í—ã –ø—Ä–æ—à–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å –æ—à–∏–±–∫–∞–º–∏üòî, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –±–æ–Ω—É—Å—ã –≤–∞–º –Ω–µ –¥–æ—Å—Ç–∞–Ω—É—Ç—Å—è. 
–ù–æ –º—ã –≤–µ—Ä–∏–ºüôè—á—Ç–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –≤–∞–º –ø–æ–≤–µ–∑–µ—Ç‚ù§Ô∏è
                         ''',
                         parse_mode=ParseMode.MARKDOWN)
